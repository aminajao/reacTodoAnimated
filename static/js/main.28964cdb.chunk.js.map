{"version":3,"sources":["Todo.jsx","AddNewTodo.jsx","TodoList.jsx","App.js","index.js"],"names":["Todo","props","handleRemove","removeTodo","id","handleChange","e","setState","target","name","value","toggleForm","isEditing","state","handleUpdate","preventDefault","updateTodo","task","handleCompletion","toggleTodo","todo","this","TransitionGroup","className","completed","CSSTransition","key","timeout","classNames","onSubmit","onChange","type","onClick","class","Component","AddNewTodo","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","filter","newTodo","updatedTask","updatedTodos","map","toggleCompletion","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28964cdb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todo.css';\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.todo.task\r\n        }\r\n    }\r\n\r\n    handleRemove = () => {\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    toggleForm = () => {\r\n        this.setState({ isEditing: !this.state.isEditing });\r\n    }\r\n\r\n    handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({ isEditing: false });\r\n    }\r\n\r\n    handleCompletion = () => {\r\n        this.props.toggleTodo()\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.todo\r\n        return (\r\n            <TransitionGroup className={this.props.completed ? \"Todo completed\" : \"Todo\"}>\r\n                {\r\n                    this.state.isEditing ? (\r\n                        <CSSTransition key='editing' timeout={500} classNames='form'>\r\n                            <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n                                <input onChange={this.handleChange}\r\n                                    type=\"text\"\r\n                                    id=\"task\"\r\n                                    name='task'\r\n                                    value={this.state.task} />\r\n                                <input type=\"submit\" value=\"Save\" onClick={this.handleUpdate} />\r\n\r\n                            </form>\r\n                        </CSSTransition>\r\n                    ) : (\r\n                            <CSSTransition key='normal' timeout={500} classNames='task-text'>\r\n                                <li onClick={this.handleCompletion}\r\n                                    className={this.props.completed ? 'Todo-task completed' : 'Todo-task'}\r\n                                >{task}\r\n                                </li>\r\n                            </CSSTransition>\r\n                        )\r\n                }\r\n                <div className='Todo-buttons'>\r\n                    <button onClick={this.toggleForm}><i class='fas fa-pen' /></button>\r\n                    <button onClick={this.handleRemove}><i class='fas fa-trash'></i></button>\r\n                </div>\r\n            </TransitionGroup>\r\n\r\n        )\r\n\r\n    }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport './AddNewTodo.css'\r\n\r\nclass AddNewTodo extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            task: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n        this.setState({ task: '' });\r\n    }\r\n    render() {\r\n        return (\r\n            <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"Task\">Enter Todo</label>\r\n                <input\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"task\"\r\n                    value={this.state.task}\r\n                    id=\"task\"\r\n                    placeholder='Enter New Todo' />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewTodo;\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport AddNewTodo from './AddNewTodo';\r\nimport './TodoList.css'\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: [\r\n\r\n            ]\r\n        };\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    createTodo = (newTodo) => {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n\r\n    updateTodo = (id, updatedTask) => {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return ({ ...todo, task: updatedTask })\r\n\r\n            }\r\n            return todo\r\n        })\r\n        this.setState({ todos: updatedTodos });\r\n    }\r\n\r\n    toggleCompletion = (id) => {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, completed: !todo.completed }\r\n            }\r\n            return todo\r\n        });\r\n        this.setState({ todos: updatedTodos });\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos\r\n        return (\r\n            <div className='TodoList'>\r\n                <h1>Todo List!\r\n                    <span>A Simple React Todo List App.</span>\r\n                </h1>\r\n                <AddNewTodo createTodo={this.createTodo} />\r\n\r\n                <ul>\r\n                    {\r\n                        todos.map(todo => (\r\n                            <Todo\r\n                                removeTodo={() => { this.handleRemove(todo.id) }}\r\n                                id={todo.id}\r\n                                completed={todo.completed}\r\n                                todo={todo}\r\n                                key={todo.id}\r\n                                updateTodo={this.updateTodo}\r\n                                toggleTodo={() => { this.toggleCompletion(todo.id) }}\r\n                            />\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}